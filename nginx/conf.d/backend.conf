# -----------------------------------------------------------------------------
# backend.conf - Nginx configuration for CoveAPI backend reverse proxy
#
# This file configures Nginx to:
#   - Redirect all HTTP traffic to HTTPS for secure communication.
#   - Serve ACME challenge files for Let's Encrypt certificate renewal.
#   - Terminate SSL/TLS and proxy HTTPS requests to the backend service.
#
# Domain: coveapi.egeuysal.com
# Backend: http://backend:8080 (Docker service)
#
# Key Sections:
#   1. HTTP server (port 80): Redirects all requests to HTTPS, except for ACME challenge.
#   2. HTTPS server (port 443): Handles SSL, security headers, and proxies to backend.
#
# Certificate paths assume usage of Certbot/Let's Encrypt.
#
# For more information, see:
#   - https://nginx.org/en/docs/
#   - https://certbot.eff.org/
# -----------------------------------------------------------------------------

# --- HTTP Server: Redirect to HTTPS and serve ACME challenge ---
server {
    listen 80;
    server_name coveapi.egeuysal.com;

    # Serve Let's Encrypt ACME challenge for certificate renewal
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
        allow all;
    }

    # Redirect all other HTTP requests to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# --- HTTPS Server: SSL termination and reverse proxy to backend ---
server {
    listen 443 ssl;
    http2 on;
    server_name coveapi.egeuysal.com;

    # SSL certificate and key (managed by Certbot/Let's Encrypt)
    ssl_certificate /etc/letsencrypt/live/coveapi.egeuysal.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/coveapi.egeuysal.com/privkey.pem;

    # SSL protocols and ciphers for strong security
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256";
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;

    # Proxy all HTTPS requests to the backend service
    location / {
        proxy_pass http://backend:8080/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
